/*
 * This file is generated by jOOQ.
*/
package test.boot.entity.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import test.boot.entity.Keys;
import test.boot.entity.Public;
import test.boot.entity.tables.records.RedisCollectionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RedisCollection extends TableImpl<RedisCollectionRecord> {

    private static final long serialVersionUID = -59248723;

    /**
     * The reference instance of <code>PUBLIC.REDIS_COLLECTION</code>
     */
    public static final RedisCollection REDIS_COLLECTION = new RedisCollection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RedisCollectionRecord> getRecordType() {
        return RedisCollectionRecord.class;
    }

    /**
     * The column <code>PUBLIC.REDIS_COLLECTION.ID</code>.
     */
    public final TableField<RedisCollectionRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_C59BD5C2_4793_4348_96DD_48FA120B8E95)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>PUBLIC.REDIS_COLLECTION.COMMAND</code>.
     */
    public final TableField<RedisCollectionRecord, String> COMMAND = createField("COMMAND", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.REDIS_COLLECTION.CONN_ID</code>.
     */
    public final TableField<RedisCollectionRecord, Integer> CONN_ID = createField("CONN_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>PUBLIC.REDIS_COLLECTION</code> table reference
     */
    public RedisCollection() {
        this("REDIS_COLLECTION", null);
    }

    /**
     * Create an aliased <code>PUBLIC.REDIS_COLLECTION</code> table reference
     */
    public RedisCollection(String alias) {
        this(alias, REDIS_COLLECTION);
    }

    private RedisCollection(String alias, Table<RedisCollectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private RedisCollection(String alias, Table<RedisCollectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RedisCollectionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REDIS_COLLECTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RedisCollectionRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_B;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RedisCollectionRecord>> getKeys() {
        return Arrays.<UniqueKey<RedisCollectionRecord>>asList(Keys.CONSTRAINT_B);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RedisCollection as(String alias) {
        return new RedisCollection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RedisCollection rename(String name) {
        return new RedisCollection(name, null);
    }
}
